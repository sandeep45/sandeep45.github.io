## getting started with nodejs
.editor
so cool. i wish ruby had this.
now i can write code, with indentation write in the console.
.save & .load
so cool. lets save the console history and directly load it back.
ruby has this, but gotta use history and its not this clean.


## RubyMine keyboard shortcut
in spec file
bring cursor to where your test is
Control + Shift + r
this will run that specefic test

To see all test configs in there:
Alt + Command + r

To run the last test config again
Control + r

## Named arguments
https://www.justinweiss.com/articles/fun-with-keyword-arguments/

def sandeep(a:, b:)
  puts "a: #{a} - b: #{b}"
end

Command + plus or minus sign
to expland collapse an item




sandeep({:a => 1, :b => 2, :c => 3})
ArgumentError (unknown keyword: c)

sandeep({:a => 1, :b => 2})
a: 1 - #b: {b}

sandeep(:a => 1, :b => 2, :c => 3)
ArgumentError (unknown keyword: c)

## promises
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

## aysnc/await
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function
keyword `async` can be written infront of a function.
it signifies that this is function is asychronous.
Although doesnt make sense to do, but i could have just a regular function and write async in front of it.
```
async function sandeep(){
	console.log("in sandeep");
};
sandeep();
```

An `async` function always returns a promise
```
async function sandeep(){
	console.log("in sandeep");
};
sandeep().then(
(e) => {
	console.log("done", e);
}
);
```

The value this function returns is the value passed in to the `success` handler of the `then`.
```
async function sandeep(){
	console.log("in sandeep");
  return 5;
};
sandeep().then(
(e) => {
	console.log("done", e);
}
);
```

So what is `async` getting us?
Well it makes the function return a promise. And makes that promise resolved with the actual value the function returns.
So its a magic keyword. In the function above we are normally returning `5`. But by adding `async` in the begining, it changes to return a promise and resolve that promise with `5`.

Where `aysync` shines even more is when we use `await` in its body.

`Await` is a keyword we can apply before a promise and in the body of an `await` function. It will stop the flow of the function its in and will continue when the promise its awaiting on resolved. It returns the value the promises its awaiting on resolves with.

```
async function sandeep() {
  console.log("sandeep");
  var a = 0, b = 0;
  a = await Promise.resolve(2);
  b = await Promise.resolve(3);
  return a + b;
}
sandeep().then(r => console.log(r)); // 5
```

In the above function, normally the return statement exectues immediately. But because we have an await statement in there, it stops the flow, and then the return statement is only running after the awaited promises finish. Now we know that JS is single threaded and it cant block a function. So whats really happening is that an async function be default automatically returns a promise and then actual return is just resolving the promise with the its value.

Without `await` we can not access the implictly returned promise. therefore if we want to do this without an await, then we must declare our own promise and return that explicity.

```
async function sandeep() {
  console.log("sandeep");
  var a = 0, b = 0;
  var p = new Promise(resolve => {
    Promise.resolve(2).then(
    r => {
      a = r;
      return Promise.resolve(3);
    }).then(r => {
      b = r;
    }).then ( () => {
      resolve(a + b);
    })
  });
  return p;
}
sandeep().then(r => console.log(r)); // 5
```
Note again that in the function above I had to explictly return a promise because without `await` i had no way to access and resolve the implicity returned promise.
Also note, if we are going to by explicitly returning a promise and not using an `await`, then we dont have to use `async` keyword as its not doing anything for us.

Recap:
`async` makes the function implicitly return a promise. it also makes the value returned by the function be the value the implicit promise is resolved with.
`await` returns the value the promise its waiting on resolves with. it executes everything below it in the success wrapper called after the promise resolves. And remember that last value of the async function which is the resolved value of the implicit promise, it makes that return run after the promise its awaiting on finishes it in its success callback.

CAP Theorem
=======
# nodejs

global object gets you all global stuff
in their we have global.process, global.process.cwd()
or you can just do `process` or `process.cwd()`

```
const puts = (x) => global.process.stdout.write("yo yo " + x + " \n")
> puts("hey")
yo yo hey
```

`argv` on the process is an array of argumnets passed in when the process was ran

`nextTick` is the same as `setTimeout( () => {}, 0)`
tick is the next cycle when node runs through the code to be executed.

octet streams which we get from file system or TCPIP. so we use a buffer to process it.

```
buf = new Buffer(5);
buf.write("Xxxxx")
buf.toString('utf8', 0 , 2)
> 'ab'
buf.toString('utf8', 0 , 5)
> 'abcde'
Buffer.byteLength("as")
> 2
Buffer.byteLength(buf)
> 5
```

everything we dont scope to something, gets put on `global`. This is like `window` in the browser

```
var a = () => console.log("say hi")
> a()
say hi
> global.a()
say hi
```

And just like in javascript, when we make a module and put a `const` or `var` in it, then `require` or `import` that module via webpack, the variables are global only to that module and only the things exported are returned back. the same happens in Node as well.


`require` works just like how it works in webpack. you can give relative path to include your own lib, or just name of the module and it will search all required folders - global modules -> local node_modules -> directory traverse and work upwards

to export, things add whatever you build as an attribute to the `exports` object. then when some does `x = require('./file.js')`, they will have your attributes available on the `x` object

```
\\ file.js
exports.a = () => console.log("yo");
```

```
x = require('file.js')
x.a() // "yo"
```

Another option of exporting is to add the entire object you want to return to `module.exports`

```
module.exports = {
  a: () => console.log("yo");
}
```

Note: in both cases the objects `module` & `exports` were __magically__ available in our `file.js`.

Semantic Version'ing System
2.3.5
major.minor.patch
^2.2.5
the carrot makes the minor version be a wild = 2.3.5, 2.4.0, 2.5.9 etc.
~2.2.4
the told makes the patch level be a wild = 2.2.4, 2.2.5, 2.2.6 etc.
*
installs the latest version

`npm adduser` and then `npm publish` and then update version and repeat

when using node REPL
.help gives u all the commands
.editor lets your write a bunch of code in multiline style
and .load lets you load in any file you have written like you had just typed it in the shell. this is important becuase all variables and scopes are the same as the file was typed in.

EventEmitter
make an instance
add listeners using `on`. just specify the event name and handler function
then fire then by using `emit`
add as many handlers for an an event type as you want.

to check for GC start node with `--gc` option
Scavenge Operation -> identifies which objects are no longer being used
Mark-Sweep Operation -> works on old space -> stops the node process
Heap and Generation
New Space -> where objects are created
Old Space -> objects which survive 2 scavenge operations
Heap Dump -> snapshot of memory allocation at a particular point of time
kill -usr2 pid # gives a heapsnapshot file, this can be loaded in chrome, needs heapdump npm module

Starting a node project
do npm init -y
and npm install --save express
create index.js

express - app server
nodemon - autorestart
npm command `start` to run `node index.js` etc.

serve static images from a folder
build index page to show all users
build show page to show specific user data based on url

body-parser npm package to parse body

write the index and show content to a file and read from file
keep flle as jsob
use readFile, unlinkSync and writeFileSync
note that on delete we need to update both index and its show file
same applies to create

for a route handler, we can have multiple functions as handlers
in next we can pass in `route`, to skip other handlers and go to next route handler

reponse methods:
handle 404 page
do redirect on error
do download for .json files
do json to write out json

use .all method to write out logs

use `router` to setup individual routes for each subpath

one way of defining multiple handlers for various mehthods on the same path is:

```
app.route("/:username").all().get().put() // etc.
```

for one subpath, built all actions on a router
then in the main app, give the path and the router you want to handle it.

read from file, streaming, non blocking and write to browser
read from file, streaming, parase the json, if it matches and then write the matched ones to browser


use a seperate json file for routes
file with a bunch of names and we want them all mapped to a handler which does something via names
colon to accept variables and access via params
regex also works
order matters
next allows chaining handlers

resp.send("sds") // it seems to be setting html typw
render jade views

read data from a file in a non-blocking stream
then use jsonStream to parse it, format it
and then write non-blocking to another file or response

checkout middlewheres listed on the express website

put users in mongodb instead of json file
setup mongodb and its client
use mongoose for ORM
do index, update, delete etc. to mongo using mongoose

## get only one row on the right from the joined table - `distinct on`

```
Organization.joins(:campaigns).select("distinct on (organizations.id) organizations.id as org_id, campaigns.name as camp_name")
```

```
SELECT distinct on (organizations.id) organizations.id as org_id, campaigns.name as camp_name FROM "organizations" INNER JOIN "campaigns" ON "campaigns"."organization_id" = "organizations"."id"
```

Note we are doing `distinct on` here, which is different from `distinct`

SELECT DISTINCT ON ( expression [, …] ) **keeps** only the first row of each set of rows where the given expressions evaluate to equal

where as distinct given a column will reduce to only unique ones, but it wont do anything about the data being joined to it and therefore you will have duplicate rows.

so Org.all.select("distinct(name)")" will give you all distinct names
and org.joins(:campaign).select("distinct(name), campaigns.*") will cause those names to be repeated over and over as orgs have many campaigns

but distinct on, doesnt have this problem. It is kinda working after the fact. It is filtering out rows which match the same clause and keeping the first one, after all the joins and stuff have happened.

Now we are adding the `order by` in the end so we can make the first row it keeps predictable. without that we dont which the first row will be everytime the query runs.

Best way to think of `distinct on` is to run your query without, let it print duplicate rows the data on left being same, and data on right getting repeated, and then ask yourself would you like to see just the first row of each group. if so add the distinct on. if you want to change how the groupings are defined, then control that by the expressions in distinct on. If you want to change which row should be the first one in each group, then do that by adding orders.

## rspec

only run what failed last time and stop at first failure
https://relishapp.com/rspec/rspec-core/docs/command-line/only-failures
spring rspec --next-failure

just run what failed last time
spring rspec --only-failures

print a warning of doing find_each with limit

shift + command + 8
toggles selection between line mode and column mode

alt+shift+arrow will move the line up down while making room for it as it moves.

either install awesome_print or puts out the result of JSON.pretty_generate which take a JSON
puts JSON.pretty_generate x.data
{
  "a": 5
}

x = {:a => 5}.to_json
"{\"a\":5}"

puts JSON.pretty_generate JSON.parse("{\"a\":5}")
{
  "a": 5
}

to get to the start or end of the document:
command + home
command + end

minimize window - command + m
to maximine a minimized window
command-tab to get to app then use up/down arrow to get to a minimized window.
https://apple.stackexchange.com/questions/55432/keyboard-shortcut-for-restoring-applications-from-the-mac-os-x-dock

when inserting data from CSV be careful of strings being casted to nums

reset Hirb after window resize
Hirb.disable
Hirb.enable

mass insert statement in sql aka UPSERT
with sanatize
on conflict
do nothing
udpate with excluded

Account.where("id in (?)", [1,2])
  Account Load (0.3ms)  SELECT "accounts".* FROM "accounts" WHERE (id in (1,2))

Account.where(:id => [1,2])
  Account Load (0.3ms)  SELECT "accounts".* FROM "accounts" WHERE "accounts"."id" IN (1, 2)

Account.where("id in (?)", [])
  Account Load (0.3ms)  SELECT "accounts".* FROM "accounts" WHERE (id in (NULL))

Account.where(:id => [])
  Account Load (0.3ms)  SELECT "accounts".* FROM "accounts" WHERE 1=0

if you have a page on listenloop.ngrok.io
and it loads a script from localhost:8080
and this script writes a cookie
then that cookies domain is going to be listenloop.ngrok.io
and it will not be localhost:8080 even though thats the domain from where the script was loaded.

the way to write a cookie of a different domain, make a call to that domain and have that domain on the response send the cookie.

easy place to see your cookies is chrome inspector -> Application -> Storage -> Cookies

and to write the cookie: `document.cookie = `sandeep=arneja1;domain=localhost;path=/`;
here setting the domain to a domain which is not the domain the page is loaded from doesn't help.

CAP Theorem

2.3.1 :098 > Campaign.all
  Campaign Load (0.8ms)  SELECT "campaigns".* FROM "campaigns"
+----+-------+---------+----------+---------+---------+----------+---------+---------+---------+---------+---------+---------+----------+---------+----------+---------+---------+---------+--------+---------+---------+----------+---------+
| id | name  | user_id | status   | dest... | ss_l... | ss_lo... | ss_a... | max_... | rema... | form... | clic... | impr... | time_... | crea... | updat... | acco... | acco... | last... | markup | arch... | last... | statu... | recu... |
+----+-------+---------+----------+---------+---------+----------+---------+---------+---------+---------+---------+---------+----------+---------+----------+---------+---------+---------+--------+---------+---------+----------+---------+
| 1  | first | 1       | active   | http... |         | true     | true    | 300.0   | 300.0   | 0       | 0       | 0       | 0        | 2017... | 2017-... | 6       | 0       |         | 2.0    |         |         |          | true    |
| 3  | prod1 | 2       | paused   | http... |         | true     | true    | 300.0   | 500.0   | 0       | 0       | 0       | 0        | 2017... | 2017-... | 6       | 0       |         | 2.0    |         | 2017... |          | true    |
| 4  | yoyo  |         | in_re... |         |         | true     | true    | 0.0     | 0.0     | 0       | 0       | 0       | 0        | 2017... | 2017-... | 1       | 0       |         | 2.0    |         |         |          | true    |
+----+-------+---------+----------+---------+---------+----------+---------+---------+---------+---------+---------+---------+----------+---------+----------+---------+---------+---------+--------+---------+---------+----------+---------+
3 rows in set
2.3.1 :099 > Campaign.includes(:ss_rtb_campaign).where("campaigns.id is not ?", nil).find_each {|c| puts c.id }
  Campaign Load (0.8ms)  SELECT  "campaigns".* FROM "campaigns" WHERE (campaigns.id is not NULL) ORDER BY "campaigns"."id" ASC LIMIT $1  [["LIMIT", 1000]]
  SsRtbCampaign Load (0.4ms)  SELECT "ss_rtb_campaigns".* FROM "ss_rtb_campaigns" WHERE "ss_rtb_campaigns"."campaign_id" IN (1, 3, 4)
1
3
4
 => nil
2.3.1 :100 > Campaign.includes(:ss_rtb_campaign).where("campaigns.id is not ?", nil).find_each {|c| puts "#{c.id} - #{c.ss_rtb_campaign}" }
  Campaign Load (0.7ms)  SELECT  "campaigns".* FROM "campaigns" WHERE (campaigns.id is not NULL) ORDER BY "campaigns"."id" ASC LIMIT $1  [["LIMIT", 1000]]
  SsRtbCampaign Load (0.3ms)  SELECT "ss_rtb_campaigns".* FROM "ss_rtb_campaigns" WHERE "ss_rtb_campaigns"."campaign_id" IN (1, 3, 4)
1 - #<SsRtbCampaign:0x007f8876f043e8>
3 - #<SsRtbCampaign:0x007f8876f04280>
4 -
 => nil
2.3.1 :101 > Campaign.includes(:ss_rtb_campaign).where("campaigns.id is not ?", nil).find_each {|c| puts "#{c.id} - #{c.ss_rtb_campaign.try(:id)}" }
  Campaign Load (0.7ms)  SELECT  "campaigns".* FROM "campaigns" WHERE (campaigns.id is not NULL) ORDER BY "campaigns"."id" ASC LIMIT $1  [["LIMIT", 1000]]
  SsRtbCampaign Load (0.7ms)  SELECT "ss_rtb_campaigns".* FROM "ss_rtb_campaigns" WHERE "ss_rtb_campaigns"."campaign_id" IN (1, 3, 4)
1 - 1
3 - 5
4 -
 => nil
2.3.1 :102 > Campaign.includes(:ss_rtb_campaign).find_each {|c| puts "#{c.id} - #{c.ss_rtb_campaign.try(:id)}" }
  Campaign Load (0.9ms)  SELECT  "campaigns".* FROM "campaigns" ORDER BY "campaigns"."id" ASC LIMIT $1  [["LIMIT", 1000]]
  SsRtbCampaign Load (0.5ms)  SELECT "ss_rtb_campaigns".* FROM "ss_rtb_campaigns" WHERE "ss_rtb_campaigns"."campaign_id" IN (1, 3, 4)
1 - 1
3 - 5
4 -
 => nil
2.3.1 :103 > Campaign.joins(:ss_rtb_campaign).find_each {|c| puts "#{c.id} - #{c.ss_rtb_campaign.try(:id)}" }
  Campaign Load (1.0ms)  SELECT  "campaigns".* FROM "campaigns" INNER JOIN "ss_rtb_campaigns" ON "ss_rtb_campaigns"."campaign_id" = "campaigns"."id" ORDER BY "campaigns"."id" ASC LIMIT $1  [["LIMIT", 1000]]
  SsRtbCampaign Load (0.5ms)  SELECT  "ss_rtb_campaigns".* FROM "ss_rtb_campaigns" WHERE "ss_rtb_campaigns"."campaign_id" = $1 LIMIT $2  [["campaign_id", 1], ["LIMIT", 1]]
1 - 1
  SsRtbCampaign Load (0.4ms)  SELECT  "ss_rtb_campaigns".* FROM "ss_rtb_campaigns" WHERE "ss_rtb_campaigns"."campaign_id" = $1 LIMIT $2  [["campaign_id", 3], ["LIMIT", 1]]
3 - 5
 => nil
2.3.1 :104 > Campaign.left_outer_joins(:ss_rtb_campaign).find_each {|c| puts "#{c.id} - #{c.ss_rtb_campaign.try(:id)}" }
  Campaign Load (0.8ms)  SELECT  "campaigns".* FROM "campaigns" LEFT OUTER JOIN "ss_rtb_campaigns" ON "ss_rtb_campaigns"."campaign_id" = "campaigns"."id" ORDER BY "campaigns"."id" ASC LIMIT $1  [["LIMIT", 1000]]
  SsRtbCampaign Load (0.5ms)  SELECT  "ss_rtb_campaigns".* FROM "ss_rtb_campaigns" WHERE "ss_rtb_campaigns"."campaign_id" = $1 LIMIT $2  [["campaign_id", 1], ["LIMIT", 1]]
1 - 1
  SsRtbCampaign Load (0.4ms)  SELECT  "ss_rtb_campaigns".* FROM "ss_rtb_campaigns" WHERE "ss_rtb_campaigns"."campaign_id" = $1 LIMIT $2  [["campaign_id", 3], ["LIMIT", 1]]
3 - 5
  SsRtbCampaign Load (0.7ms)  SELECT  "ss_rtb_campaigns".* FROM "ss_rtb_campaigns" WHERE "ss_rtb_campaigns"."campaign_id" = $1 LIMIT $2  [["campaign_id", 4], ["LIMIT", 1]]
4 -
 => nil
2.3.1 :105 >




Error setting certificate on load balancer
Server Certificate not found for the key: arn:aws:iam::687065209424:server-certificate/june122017

https://screencast.com/t/oZBIhHuG

a table with no data, but order and limit is slow

SLOW:
select * from impressions inner join prospects on (prospects.id = impressions.prospect_id) inner join accounts on accounts.id = prospects.account_id where accounts.id = 75206 order by impressions.id limit 1
FAST:
select * from impressions inner join prospects on (prospects.id = impressions.prospect_id) inner join accounts on accounts.id = prospects.account_id where accounts.id = 75206 order by impressions.id
so sorting is not the issue. its fast when it comes to sorting and displaying all records
but slow when it comes to just displaying 1 record
https://dba.stackexchange.com/questions/110636/postgres-poor-performance-on-order-by-id-desc-limit-1/110919

select i.* from (select impressions.* from impressions inner join prospects on (prospects.id = impressions.prospect_id) inner join accounts on accounts.id = prospects.account_id where accounts.id = 75206 order by impressions.id) as i order by i.id ASC limit 1

select * from (select impressions.* from impressions inner join prospects on (prospects.id = impressions.prospect_id) inner join accounts on accounts.id = prospects.account_id where accounts.id = 75206 order by impressions.id) as i order by i.id ASC limit 1

select * from
	(select impressions.* from impressions inner join prospects on (prospects.id = impressions.prospect_id) inner join accounts on accounts.id = prospects.account_id where accounts.id = 75206 order by impressions.id)
	as i order by i.id ASC limit 1




How to to run a locally installed npm package

option 1. go to node_modules, then in to the package and then run `node ./AllClubs.js`
option 2. load up ./node_modules in your PATH
option 3. install the package globally with `npm install -g package_name` and then run package directly
option 4. use npm-run. You will first need to install npm-run, globally

---

const y = {name: "y"};
const x = {name: "x"};

const ans = {...x, ...y, name: "ans"};
console.info(ans);
the one on the right wins

---

coalece
greatest
Cast - select & where

strftime('%Y-%m-%d %H:%M:%S.%6N')

timezone

---

mass insert and update
`axios.defaults.withCredentials`
this allows a request made to another domain to setup a cookie for itself
domain A makes request to domain B
domain b says set cookie "abc=xyz", host => B, this is set by the response header
the browser will set this cookie only if `withCredentials` is set to `true`


rails params issue
2.3.1 :078 > def sandeep
2.3.1 :079?>   return {}
2.3.1 :080?>   end
 => :sandeep
2.3.1 :081 > sandeep = sandeep.merge :x => "y"
NoMethodError: undefined method `merge' for nil:NilClass
2.3.1 :082 > sandeep = sandeep().merge :x => "y"
 => {:x=>"y"}
2.3.1 :083 > sandeep
 => {:x=>"y"}
2.3.1 :084 > sandeep.class
 => Hash


rails cache counter
the `.size` method gets confused when and reads the wrong value from cache counter

lets say
Campaign -> Accounts -> Prospects -> Impressions -> Clicks

we add a cache counter on clicks to store its value on impressions. this is done like this:

class Click
  belongs_to :impressions, :cache_counter => true
end

and then on Impression table we add a column called `clicks_count`

Now if you create an click like this: `Click.create :impression_id => 1`
You will notice the clicks_count on impressions has gone up.
Impression.find(1).clicks_count # 1
Impression.find(1).clicks.size # 1 (No query, as size will use cache counter)
Impression.find(1).clicks.count # 1 (Makes query to get count)

Now if we add a `clicks_count` column on `Campaign` and store some value on manually lets say 45 and then do
Campaign.clicks.size # 45 ( No query, we get 45)
size is again not making a query and just reading results of `clicks_count`
but the reality is that we dont have a cache counter on Campaign
and if it had made a query it would have gotten the real result.

rails callback
in 1st after_creaate callback, update the record. this will fire the after_update, skipping the after_save and the 2nd after_create callback. once its done updating then it will fire the after_save and then it will fire the 2nd after_create. It is doing so even though the order these are written in specify the after_create's before the after_update

after_create :my_first_after_create_method
after_create :my_second_after_create_method
after_save :my_after_save_method
after_update :my_after_update_method

def my_first_after_create_method
  puts in "my_first_after_create_method"
  self.update :name => Time.now
end

def my_second_after_create_method
  puts "my_second_after_create_method"
end

def my_after_save_method
  puts "my_after_save_method"
end

def my_after_update_method
  return if self.new_record?
  puts "my_after_update_method"
end

User.create :name => "Hey"

Output:
my_first_after_create_method
my_after_update_method
my_after_save_method
my_second_after_create_method

WHATTT!!

calling job from callback notes
1. delay running it by a few seconds

url = 1
delay 10 seconds
run it
Job -> User.find 1
positive: whatever happens represents whats in the db 10 seconds from the time after_save is called
doesn;t care if it was committed

pass in the values
Marshal.dump(object) and on the other side I do a Marshal.restore(object)
grow size, really fast

after_create_commit
after_update_commit
after_destroy_commit

we dont know the last value?
move the if statements outside the after_comit callback, in to procs,
grows ugly very quickly

or
previous_changes
http://api.rubyonrails.org/classes/ActiveModel/Dirty.html
it allows us to check wheter something changed inside the after_comit
when the job runs, it will read whats in the database
stripe card, campaign

after_save
becomes
after_create_commit
after_update_commit

or
after_commit
return if self.destroyed?


JSON.parse ' not allowed in the insider. attribute name must also be quoted. outside needs to be a quote
best is to have ' on the outside and " on the inside.

JSON.parse '[ {"f": "f"} ]'

concerns

Service Objects

scoped
e.g. searching when using params to do filters

lambda
responds to call
Lambda also responds to call so in your tests you have the possibility to mock service with lambda, which is quite convenient.
so we have a service called buildAccountOnSiteScout
another service called SetupUser calls this service
when testing SetupUser we can just pass in a proc. procs have a call method.
the SetupUser will just simply call the buildAccountOnSiteScout.call,
and a proc will nicely substitute it.

subfolders for services as long as classes are in a module which represents its folder
verb
no serive in the name
has a call, one point of entry
represents a business process. not crud methods

e.g. ActivateCampaign

This internally does index of campaigns, with a filter,
then does show on it,
then does an update on it with a hardcoded param set of status => true
and finally returns if activation succeeded or not

they contain business logic and represent that

PrepareCloseLoopAttributionReport

this gets all visitors in LL system
then all visitors in marketing automation fields
then checks user settings on what fields are marked to hold wins
then checks which visitors got saw an advertisement
then prepares a CSV with those visitors

Dependency Injection

have an intialize method and a build method

if the service relies on something else like another service or the first 10 users
then get those depencies for the service in the build method.
put them as instances on the class.
the service will always work on the intstances.
now when testing we can just call .new and set up the instances.
this prevents us from writing test code like expect(User).to receive()
We can instead just make a mock user and pass that in.
It embraces the tell, dont ask methodology

def build(count=10)
  @users = User.limit(count)
end

class doAwesome

  def self.call(*args)
    new self(*args).call
  end

  def call
    # does its thing
  end

  private

  attr_accessor :task, :place, :times

end

doAwesome.call("Rolller Coaster", "6 Flags", 10)

immutable.
once initialize it holds its data and should not change its state.
this way its easy to reason

Aldous

Virtus


CSRF warning logs me out! WTF!

rails includes does preload and eager_load
preload fetch all records as seperate query
eager_load does the join
http://blog.arkency.com/2013/12/rails4-preloading/

SQL join with multiple tables and getting count from each of them.

SELECT ad.id
     (SELECT COUNT(*) FROM impressions i WHERE am.id=i.ad_message_id) AS impressions_count,
     (SELECT COUNT(*) FROM ad_clicks ac WHERE am.id=ac.ad_message_id) AS ad_clicks_count
FROM ad_messages am
ORDER BY am.id ASC